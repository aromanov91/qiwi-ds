"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = require("react");

var PropTypes = require("prop-types");

var ErrorStackParser = require("error-stack-parser");

var _Text = require("./Text");

var _View = require("./View");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var styles = {
  redbox: {
    padding: 10,
    width: 480,
    backgroundColor: 'rgb(204, 0, 0)'
  },
  frame: {},
  message: {
    fontWeight: 'bold',
    fontSize: 16,
    lineHeight: 16 * 1.2,
    color: 'white'
  },
  stack: {
    fontFamily: 'Monaco',
    marginTop: 20,
    color: 'white'
  }
}; // $FlowFixMe

var RedBox =
/*#__PURE__*/
function (_React$Component) {
  _inherits(RedBox, _React$Component);

  function RedBox() {
    _classCallCheck(this, RedBox);

    return _possibleConstructorReturn(this, _getPrototypeOf(RedBox).apply(this, arguments));
  }

  _createClass(RedBox, [{
    key: "renderFrames",
    value: function renderFrames(frames) {
      /* eslint-disable react/no-array-index-key */
      return frames.map(function (f, index) {
        return React.createElement(_Text.default, {
          key: index,
          style: styles.stack
        }, f.functionName);
      });
      /* eslint-enable */
    }
  }, {
    key: "render",
    value: function render() {
      var error = this.props.error;

      if (typeof error === 'string') {
        return React.createElement(_View.default, {
          name: "RedBox",
          style: styles.redbox
        }, React.createElement(_Text.default, {
          name: "Message",
          style: styles.message
        }, "Error: ".concat(error)));
      }

      var frames;
      var parseError;
      var frameChildren;

      try {
        frames = ErrorStackParser.parse(error);
      } catch (e) {
        parseError = new Error('Failed to parse stack trace. Stack trace information unavailable.');
      }

      if (parseError) {
        frameChildren = React.createElement(_View.default, {
          style: styles.frame,
          key: 0
        }, React.createElement(_View.default, null, parseError.message));
      }

      if (frames) {
        frameChildren = this.renderFrames(frames);
      }

      return React.createElement(_View.default, {
        name: "RedBox",
        style: styles.redbox
      }, React.createElement(_Text.default, {
        name: "Message",
        style: styles.message
      }, "".concat(error.name, ": ").concat(error.message)), React.createElement(_View.default, {
        name: "Frames",
        style: styles.stack
      }, frameChildren));
    }
  }]);

  return RedBox;
}(React.Component);

exports.default = RedBox;

_defineProperty(RedBox, "propTypes", {
  error: PropTypes.oneOfType([PropTypes.instanceOf(Error), PropTypes.string]).isRequired // filename: PropTypes.string,
  // editorScheme: PropTypes.string,
  // useLines: PropTypes.bool,
  // useColumns: PropTypes.bool,

});

_defineProperty(RedBox, "defaultProps", {
  useLines: true,
  useColumns: true
});