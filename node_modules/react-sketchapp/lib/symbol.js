"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSymbolComponentByName = exports.getSymbolMasterById = exports.getSymbolMasterByName = exports.makeSymbol = exports.createSymbolInstanceClass = exports.injectSymbols = exports.getSymbolsPage = void 0;

var React = require("react");

var PropTypes = require("prop-types");

var _sketchappJsonPlugin = require("sketchapp-json-plugin");

var _stylesheet = require("./stylesheet");

var _models = require("./jsonUtils/models");

var _ViewStylePropTypes = require("./components/ViewStylePropTypes");

var _buildTree = require("./buildTree");

var _flexToSketchJSON = require("./flexToSketchJSON");

var _render = require("./render");

var _resets = require("./resets");

var _getDocument = require("./utils/getDocument");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var id = 0;

var nextId = function nextId() {
  return ++id;
}; // eslint-disable-line


var displayName = function displayName(Component) {
  return Component.displayName || Component.name || "UnknownSymbol".concat(nextId());
};

var hasInitialized = false;
var symbolsRegistry = {};
var existingSymbols = [];
var layers = {};

var msListToArray = function msListToArray(pageList) {
  var out = []; // eslint-disable-next-line

  for (var i = 0; i < pageList.length; i++) {
    out.push(pageList[i]);
  }

  return out;
};

var getSymbolsPage = function getSymbolsPage(documentData) {
  var pages = documentData.pages();
  var array = msListToArray(pages);
  return array.find(function (p) {
    return String(p.name()) === 'Symbols';
  });
};

exports.getSymbolsPage = getSymbolsPage;

var getExistingSymbols = function getExistingSymbols(documentData) {
  if (!hasInitialized) {
    hasInitialized = true;
    var symbolsPage = getSymbolsPage(documentData);

    if (!symbolsPage) {
      var currentPage = documentData.currentPage();
      symbolsPage = documentData.addBlankPage();
      symbolsPage.setName('Symbols');
      documentData.setCurrentPage(currentPage);
    }

    existingSymbols = msListToArray(symbolsPage.layers()).map(function (x) {
      var symbolJson = JSON.parse((0, _sketchappJsonPlugin.toSJSON)(x));
      layers[symbolJson.symbolID] = x;
      return symbolJson;
    });
    existingSymbols.forEach(function (symbolMaster) {
      if (symbolMaster._class !== 'symbolMaster') return;
      if (symbolMaster.name in symbolsRegistry) return;
      symbolsRegistry[symbolMaster.name] = symbolMaster;
    });
  }

  return existingSymbols;
};

var getSymbolID = function getSymbolID(masterName) {
  var symbolId = (0, _models.generateID)();
  existingSymbols.forEach(function (symbolMaster) {
    if (symbolMaster.name === masterName) {
      symbolId = symbolMaster.symbolID;
    }
  });
  return symbolId;
};

var injectSymbols = function injectSymbols(documentData) {
  // if hasInitialized is false then makeSymbol has not yet been called
  if (hasInitialized) {
    if (!documentData) {
      documentData = (0, _getDocument.getDocumentDataFromContext)(context); // eslint-disable-line
    }

    var currentPage = documentData.currentPage();
    var symbolsPage = documentData.symbolsPageOrCreateIfNecessary();
    var left = 0;
    Object.keys(symbolsRegistry).forEach(function (key) {
      var symbolMaster = symbolsRegistry[key];
      symbolMaster.frame.y = 0;
      symbolMaster.frame.x = left;
      left += symbolMaster.frame.width + 20;
      var newLayer = (0, _sketchappJsonPlugin.fromSJSONDictionary)(symbolMaster);
      layers[symbolMaster.symbolID] = newLayer;
    }); // Clear out page layers to prepare for re-render

    (0, _resets.resetLayer)(symbolsPage);
    (0, _render.renderLayers)(Object.keys(layers).map(function (k) {
      return layers[k];
    }), symbolsPage);
    documentData.setCurrentPage(currentPage);
  }
};

exports.injectSymbols = injectSymbols;

var createSymbolInstanceClass = function createSymbolInstanceClass(symbolMaster) {
  var _class, _temp;

  return _temp = _class =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(_class, _React$Component);

    function _class() {
      _classCallCheck(this, _class);

      return _possibleConstructorReturn(this, _getPrototypeOf(_class).apply(this, arguments));
    }

    _createClass(_class, [{
      key: "render",
      value: function render() {
        return React.createElement("symbolinstance", {
          symbolID: symbolMaster.symbolID,
          name: this.props.name || symbolMaster.name,
          style: _stylesheet.default.flatten(this.props.style),
          resizingConstraint: this.props.resizingConstraint,
          overrides: this.props.overrides
        });
      }
    }]);

    return _class;
  }(React.Component), _defineProperty(_class, "symbolID", symbolMaster.symbolID), _defineProperty(_class, "masterName", symbolMaster.name), _defineProperty(_class, "displayName", "SymbolInstance(".concat(symbolMaster.name, ")")), _defineProperty(_class, "propTypes", {
    style: PropTypes.shape(_ViewStylePropTypes.default),
    name: PropTypes.string,
    overrides: PropTypes.object,
    // eslint-disable-line
    resizingConstraint: PropTypes.object // eslint-disable-line

  }), _temp;
};

exports.createSymbolInstanceClass = createSymbolInstanceClass;

var makeSymbol = function makeSymbol(Component, name, documentData) {
  if (!hasInitialized) {
    getExistingSymbols(documentData || (0, _getDocument.getDocumentDataFromContext)(context));
  }

  var masterName = name || displayName(Component);
  var symbolID = getSymbolID(masterName);
  var symbolMaster = (0, _flexToSketchJSON.default)((0, _buildTree.default)(React.createElement("symbolmaster", {
    symbolID: symbolID,
    name: masterName
  }, React.createElement(Component, null))));
  symbolsRegistry[symbolID] = symbolMaster;
  return createSymbolInstanceClass(symbolMaster);
};

exports.makeSymbol = makeSymbol;

var getSymbolMasterByName = function getSymbolMasterByName(name) {
  var symbolID = Object.keys(symbolsRegistry).find(function (key) {
    return String(symbolsRegistry[key].name) === name;
  });

  if (typeof symbolID === 'undefined') {
    throw new Error('##FIXME## NO MASTER FOR THIS SYMBOL NAME');
  }

  return symbolsRegistry[symbolID];
};

exports.getSymbolMasterByName = getSymbolMasterByName;

var getSymbolMasterById = function getSymbolMasterById(symbolID) {
  var symbolMaster = symbolID ? symbolsRegistry[symbolID] : undefined;

  if (typeof symbolMaster === 'undefined') {
    throw new Error('##FIXME## NO MASTER WITH THAT SYMBOL ID');
  }

  return symbolMaster;
};

exports.getSymbolMasterById = getSymbolMasterById;

var getSymbolComponentByName = function getSymbolComponentByName(masterName) {
  return createSymbolInstanceClass(getSymbolMasterByName(masterName));
};

exports.getSymbolComponentByName = getSymbolComponentByName;