"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _SketchRenderer2 = require("./SketchRenderer");

var _models = require("../jsonUtils/models");

var _symbol = require("../symbol");

var _hacksForJSONImpl = require("../jsonUtils/hacksForJSONImpl");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var findInGroup = function findInGroup(layer, type) {
  return layer && layer.layers && layer.layers.find(function (l) {
    return l._class === type;
  });
};

var hasImageFill = function hasImageFill(layer) {
  return !!(layer.style && layer.style.fills && layer.style.fills.some(function (f) {
    return f.image;
  }));
};

var overrideProps = function overrideProps(layer) {
  return {
    type: layer._class,
    objectId: layer.do_objectID,
    name: layer.name
  };
};

var removeDuplicateOverrides = function removeDuplicateOverrides(overrides) {
  var seen = {};
  return overrides.filter(function (_ref) {
    var objectId = _ref.objectId;
    var isDuplicate = typeof seen[objectId] !== 'undefined';
    seen[objectId] = true;
    return !isDuplicate;
  });
};

var extractOverridesReducer = function extractOverridesReducer(overrides, layer) {
  if (layer._class === 'text') {
    return overrides.concat(overrideProps(layer));
  }

  if (layer._class === 'group') {
    // here we're doing some look-ahead to see if this group contains a group
    // that contains text. this is the structure that will appear if the user
    // creates a `<Text />` element with a custom name
    var subGroup = findInGroup(layer, 'group');
    var textLayer = findInGroup(subGroup, 'text');

    if (textLayer) {
      return overrides.concat(overrideProps(textLayer));
    } // here we're doing look-ahead to see if this group contains a shapeGroup
    // with an image fill. if it does we can do an image override on that
    // fill


    var shapeGroup = findInGroup(layer, 'shapeGroup');

    if (shapeGroup && hasImageFill(shapeGroup)) {
      return overrides.concat(_objectSpread({}, overrideProps(shapeGroup), {
        type: 'image',
        name: layer.name
      }));
    }
  }

  if (layer._class === 'symbolInstance') {
    return overrides.concat(_objectSpread({}, overrideProps(layer), {
      symbolID: layer.symbolID,
      width: layer.frame.width,
      height: layer.frame.height
    }));
  }

  if ((layer._class === 'shapeGroup' || layer._class === 'artboard' || layer._class === 'group') && layer.layers) {
    return layer.layers.reduce(extractOverridesReducer, overrides);
  }

  return overrides;
};

var extractOverrides = function extractOverrides() {
  var layers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var overrides = layers.reduce(extractOverridesReducer, []);
  return removeDuplicateOverrides(overrides);
};

var SymbolInstanceRenderer =
/*#__PURE__*/
function (_SketchRenderer) {
  _inherits(SymbolInstanceRenderer, _SketchRenderer);

  function SymbolInstanceRenderer() {
    _classCallCheck(this, SymbolInstanceRenderer);

    return _possibleConstructorReturn(this, _getPrototypeOf(SymbolInstanceRenderer).apply(this, arguments));
  }

  _createClass(SymbolInstanceRenderer, [{
    key: "renderGroupLayer",
    value: function renderGroupLayer(layout, style, textStyle, props) {
      var masterTree = (0, _symbol.getSymbolMasterById)(props.symbolID);
      var symbolInstance = (0, _models.makeSymbolInstance)((0, _models.makeRect)(layout.left, layout.top, layout.width, layout.height), masterTree.symbolID, props.name, props.resizingConstraint);

      if (!props.overrides) {
        return symbolInstance;
      }

      var overridableLayers = extractOverrides(masterTree.layers);
      var overrides = overridableLayers.reduce(function inject(memo, reference) {
        if (reference.type === 'symbolInstance') {
          // eslint-disable-next-line
          if (props.overrides.hasOwnProperty(reference.name)) {
            var _overrideValue = props.overrides[reference.name];

            if (typeof _overrideValue !== 'function' || typeof _overrideValue.symbolID !== 'string') {
              throw new Error('##FIXME## SYMBOL INSTANCE SUBSTITUTIONS MUST BE PASSED THE CONSTRUCTOR OF THE OTHER SYMBOL');
            }

            var originalMaster = (0, _symbol.getSymbolMasterById)(reference.symbolID);
            var replacementMaster = (0, _symbol.getSymbolMasterById)(_overrideValue.symbolID);

            if (originalMaster.frame.width !== replacementMaster.frame.width || originalMaster.frame.height !== replacementMaster.frame.height) {
              throw new Error('##FIXME## SYMBOL MASTER SUBSTITUTIONS REQUIRE THAT MASTERS HAVE THE SAME DIMENSIONS');
            }

            var _nestedOverrides = extractOverrides((0, _symbol.getSymbolMasterById)(_overrideValue.symbolID).layers).reduce(inject, {});

            return _objectSpread({}, memo, {
              [reference.objectId]: _objectSpread({
                symbolID: replacementMaster.symbolID
              }, _nestedOverrides)
            });
          }

          var nestedOverrides = extractOverrides((0, _symbol.getSymbolMasterById)(reference.symbolID).layers).reduce(inject, {});
          return _objectSpread({}, memo, {
            [reference.objectId]: nestedOverrides
          });
        } // eslint-disable-next-line


        if (!props.overrides.hasOwnProperty(reference.name)) {
          return memo;
        }

        var overrideValue = props.overrides[reference.name];

        if (reference.type === 'text') {
          if (typeof overrideValue !== 'string') {
            throw new Error('##FIXME## TEXT OVERRIDE VALUES MUST BE STRINGS');
          }

          return _objectSpread({}, memo, {
            [reference.objectId]: overrideValue
          });
        }

        if (reference.type === 'image') {
          if (typeof overrideValue !== 'string') {
            throw new Error('##FIXME"" IMAGE OVERRIDE VALUES MUST BE VALID IMAGE HREFS');
          }

          return _objectSpread({}, memo, {
            [reference.objectId]: (0, _models.makeJSONDataReference)((0, _hacksForJSONImpl.makeImageDataFromUrl)(overrideValue))
          });
        }

        return memo;
      }, {});
      symbolInstance.overrides = overrides;
      return symbolInstance;
    }
  }]);

  return SymbolInstanceRenderer;
}(_SketchRenderer2.default);

exports.default = SymbolInstanceRenderer;