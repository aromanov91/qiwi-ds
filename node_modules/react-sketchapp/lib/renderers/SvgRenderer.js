"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ViewRenderer2 = require("./ViewRenderer");

var _hacksForJSONImpl = require("../jsonUtils/hacksForJSONImpl");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var snakeExceptions = ['gradientUnits', 'gradientTransform', 'patternUnits', 'patternTransform', 'stdDeviation', 'numOctaves', 'specularExponent', 'specularConstant', 'surfaceScale'];

function toSnakeCase(string) {
  if (string === 'href') {
    return 'xlink:href';
  }

  if (snakeExceptions.indexOf(string) !== -1) {
    return string;
  }

  return string.replace(/([A-Z])/g, function ($1) {
    return "-".concat($1.toLowerCase());
  });
}

function makeSvgString(el) {
  if (typeof el === 'string') {
    return el;
  }

  var type = el.type,
      props = el.props,
      children = el.children;

  if (props && props.textNodes) {
    return props.textNodes.reduce(function (prev, textNode) {
      return prev + textNode.content;
    }, '');
  }

  if (!type || type.indexOf('svg_') !== 0) {
    throw new Error("Could not render type '".concat(type, "'. Make sure to only have <Svg.*> components inside <Svg>."));
  }

  var cleanedType = type.slice(4);
  var attributes = Object.keys(props || {}).reduce(function (prev, k) {
    return props[k] ? "".concat(prev, " ").concat(toSnakeCase(k), "=\"").concat(props[k], "\"") : prev;
  }, '');
  var string = "<".concat(cleanedType).concat(attributes);

  if (!children || !children.length) {
    string += '/>\n';
  } else {
    string += '>\n';
    string += (children || []).reduce(function (prev, c) {
      return "".concat(prev, "  ").concat(makeSvgString(c));
    }, '');
    string += "</".concat(cleanedType, ">\n");
  }

  return string;
}

var SvgRenderer =
/*#__PURE__*/
function (_ViewRenderer) {
  _inherits(SvgRenderer, _ViewRenderer);

  function SvgRenderer() {
    _classCallCheck(this, SvgRenderer);

    return _possibleConstructorReturn(this, _getPrototypeOf(SvgRenderer).apply(this, arguments));
  }

  _createClass(SvgRenderer, [{
    key: "getDefaultGroupName",
    value: function getDefaultGroupName(props) {
      return props.name || 'Svg';
    }
  }, {
    key: "renderBackingLayers",
    value: function renderBackingLayers(layout, style, textStyle, props, children) {
      var layers = _get(_getPrototypeOf(SvgRenderer.prototype), "renderBackingLayers", this).call(this, layout, style, textStyle, props); // add the "xmlns:xlink" namespace to we can use `href`
      // eslint-disable-next-line


      props['xmlns:xlink'] = 'http://www.w3.org/1999/xlink';
      var svgString = makeSvgString({
        type: 'svg_svg',
        props: props,
        children: children
      });
      var svgLayer = (0, _hacksForJSONImpl.makeSvgLayer)(layout, 'Shape', svgString);
      layers.push(svgLayer);
      return layers;
    }
  }]);

  return SvgRenderer;
}(_ViewRenderer2.default);

exports.default = SvgRenderer;