"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _layerGroup = require("../jsonUtils/layerGroup");

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var DEFAULT_OPACITY = 1.0;

var SketchRenderer =
/*#__PURE__*/
function () {
  function SketchRenderer() {
    _classCallCheck(this, SketchRenderer);
  }

  _createClass(SketchRenderer, [{
    key: "getDefaultGroupName",
    value: function getDefaultGroupName( // eslint-disable-next-line no-unused-vars
    props) {
      return 'Group';
    }
  }, {
    key: "renderGroupLayer",
    value: function renderGroupLayer(layout, style, textStyle, props) {
      // Default SketchRenderer just renders an empty group
      // TODO(lmr): applying transform to the group would be ideal, but not sure if it's possible
      // if (style.transform !== undefined) {
      //   processTransform(layer, layout, style.transform);
      // }
      var opacity = style.opacity !== undefined ? style.opacity : DEFAULT_OPACITY;
      return _objectSpread({}, (0, _layerGroup.default)(layout.left, layout.top, layout.width, layout.height, opacity, props.resizingConstraint), {
        name: props.name || this.getDefaultGroupName(props)
      });
    }
    /* eslint-disable no-unused-vars */

  }, {
    key: "renderBackingLayers",
    value: function renderBackingLayers(layout, style, textStyle, props, children) {
      return [];
    }
    /* eslint-enable */

  }]);

  return SketchRenderer;
}();

exports.default = SketchRenderer;