"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.render = exports.renderLayers = exports.renderToJSON = void 0;

var React = require("react");

var _sketchappJsonPlugin = require("sketchapp-json-plugin");

var _buildTree = require("./buildTree");

var _flexToSketchJSON = require("./flexToSketchJSON");

var _resets = require("./resets");

var _symbol = require("./symbol");

var _RedBox = require("./components/RedBox");

var _getDocument = require("./utils/getDocument");

var _isNativeDocument = require("./utils/isNativeDocument");

var _isNativePage = require("./utils/isNativePage");

var _isNativeSymbolsPage = require("./utils/isNativeSymbolsPage");

var renderToJSON = function renderToJSON(element) {
  var tree = (0, _buildTree.default)(element);
  return (0, _flexToSketchJSON.default)(tree);
};

exports.renderToJSON = renderToJSON;

var renderLayers = function renderLayers(layers, container) {
  if (container.addLayers === undefined) {
    throw new Error("\n     React SketchApp cannot render into this layer. You may be trying to render into a layer\n     that does not take children. Try rendering into a LayerGroup, Artboard, or Page.\n    ");
  }

  container.addLayers(layers);
  return container;
};

exports.renderLayers = renderLayers;

var getDefaultPage = function getDefaultPage() {
  var doc = (0, _getDocument.getDocumentDataFromContext)(context);
  var currentPage = doc.currentPage();
  return (0, _isNativeSymbolsPage.default)(currentPage) ? doc.addBlankPage() : currentPage;
};

var renderContents = function renderContents(tree, container) {
  var json = (0, _flexToSketchJSON.default)(tree);
  var layer = (0, _sketchappJsonPlugin.fromSJSONDictionary)(json);
  return renderLayers([layer], container);
};

var renderPage = function renderPage(tree, page) {
  var children = tree.children || []; // assume if name is set on this nested page, the intent is to overwrite
  // the name of the page it is getting rendered into

  if (tree.props.name) {
    page.setName(tree.props.name);
  }

  return children.map(function (child) {
    return renderContents(child, page);
  });
};

var renderDocument = function renderDocument(tree, documentData) {
  if (!(0, _isNativeDocument.default)(documentData)) {
    throw new Error('Cannot render a Document into a child of Document');
  }

  var initialPage = documentData.currentPage();
  var shouldRenderInitialPage = !(0, _isNativeSymbolsPage.default)(initialPage);
  var children = tree.children || [];
  return children.map(function (child, i) {
    if (child.type !== 'page') {
      throw new Error('Document children must be of type Page');
    }

    var page = i === 0 && shouldRenderInitialPage ? initialPage : documentData.addBlankPage();
    return renderPage(child, page);
  });
};

var renderTree = function renderTree(tree, _container) {
  if ((0, _isNativeDocument.default)(_container) && tree.type !== 'document') {
    throw new Error('You need to render a Document into Document');
  }

  if (!(0, _isNativePage.default)(_container) && tree.type === 'page') {
    throw new Error('You need to render a Page into Page');
  }

  if (tree.type === 'document') {
    var doc = _container || (0, _getDocument.getDocumentDataFromContext)(context);

    (0, _resets.resetDocument)(doc);
    return renderDocument(tree, doc);
  }

  var container = _container || getDefaultPage();

  (0, _resets.resetLayer)(container);
  return tree.type === 'page' ? renderPage(tree, container) : renderContents(tree, container);
};

var render = function render(element, container) {
  var nativeContainer;

  if (container && container.sketchObject) {
    nativeContainer = container.sketchObject;
  } else if (container) {
    nativeContainer = container;
  }

  if (!(0, _sketchappJsonPlugin.appVersionSupported)()) {
    return null; // The Symbols page holds a special meaning within Sketch / react-sketchapp
    // and due to how `makeSymbol` works, we cannot render into it
  }

  if ((0, _isNativeSymbolsPage.default)(nativeContainer)) {
    throw Error('Cannot render into Symbols page');
  }

  try {
    var tree = (0, _buildTree.default)(element);
    (0, _symbol.injectSymbols)((0, _getDocument.getDocumentDataFromContainer)(nativeContainer));
    return renderTree(tree, nativeContainer);
  } catch (err) {
    console.error(err);

    var _tree = (0, _buildTree.default)(React.createElement(_RedBox.default, {
      error: err
    }));

    return renderContents(_tree, nativeContainer);
  }
};

exports.render = render;