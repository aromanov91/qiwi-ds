"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var invariant = require("invariant");

var _sketchappJsonPlugin = require("sketchapp-json-plugin");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var TextStyles =
/*#__PURE__*/
function () {
  function TextStyles() {
    _classCallCheck(this, TextStyles);

    _defineProperty(this, "_context", void 0);

    this._context = null;
  }

  _createClass(TextStyles, [{
    key: "setContext",
    value: function setContext(context) {
      invariant(context, 'Please provide a context');
      this._context = context;
      return this;
    }
  }, {
    key: "setStyles",
    value: function setStyles(styles) {
      invariant(this._context, 'Please provide a context');

      this._context.document.documentData().layerTextStyles().setObjects(styles);

      return this;
    }
  }, {
    key: "addStyle",
    value: function addStyle(name, style) {
      var _context = this._context;
      invariant(_context, 'Please provide a context');
      var textStyle = (0, _sketchappJsonPlugin.fromSJSONDictionary)(style); // Flow doesn't pick up invariant truthies

      var context = _context;
      var container = context.document.documentData().layerTextStyles();
      var sharedStyle; // Sketch < 50

      if (container.addSharedStyleWithName_firstInstance) {
        sharedStyle = container.addSharedStyleWithName_firstInstance(name, textStyle);
      } else {
        var allocator = MSSharedStyle.alloc(); // Sketch 50, 51

        if (allocator.initWithName_firstInstance) {
          sharedStyle = allocator.initWithName_firstInstance(name, textStyle);
        } else {
          sharedStyle = allocator.initWithName_style(name, textStyle);
        }

        container.addSharedObject(sharedStyle);
      } // NOTE(gold): the returned object ID changes after being added to the store
      // _don't_ rely on the object ID we pass to it, but we have to have one set
      // otherwise Sketch crashes


      return String(sharedStyle.objectID());
    }
  }]);

  return TextStyles;
}();

var _default = new TextStyles();

exports.default = _default;