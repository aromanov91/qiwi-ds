"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var renderers = require("./renderers");

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var flexToSketchJSON = function flexToSketchJSON(node) {
  var type = node.type,
      style = node.style,
      textStyle = node.textStyle,
      layout = node.layout,
      props = node.props,
      children = node.children;
  var Renderer = renderers[type];

  if (Renderer == null) {
    // Give some insight as to why there might be issues
    // specific to Page and Document components or SVG components
    var additionalNotes = '';

    if (type === 'document') {
      additionalNotes = '\nBe sure to only have <Page> components as children of <Document>.';
    } else if (type.indexOf('svg') === 0) {
      // the svg renderer should stop the walk down the tree so it shouldn't happen
      additionalNotes = '\nBe sure to always have <Svg.*> components as children of <Svg>.';
    }

    throw new Error("Could not find renderer for type '".concat(type, "'. ").concat(additionalNotes));
  }

  var renderer = new Renderer();
  var groupLayer = renderer.renderGroupLayer(layout, style, textStyle, props);
  var backingLayers = renderer.renderBackingLayers(layout, style, textStyle, props, children); // stopping the walk down the tree if we have an svg

  var sublayers = children && type !== 'svg' ? children.map(function (child) {
    return flexToSketchJSON(child);
  }) : []; // Filter out anything null, undefined

  var layers = _toConsumableArray(backingLayers).concat(_toConsumableArray(sublayers)).filter(function (l) {
    return l;
  });

  return _objectSpread({}, groupLayer, {
    layers: layers
  });
};

var _default = flexToSketchJSON;
exports.default = _default;